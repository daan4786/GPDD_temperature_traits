{
    "collab_server" : "",
    "contents" : "#########################################################\n#\n# The purpose of this code is to integrate average monthly temperatures from WorldClim (Hijmans, R. J. et al. 2005. Very high resoluction interpolated climate surfaces for flobal land areas.)\n# into the global population dynamics database, which is available through the package 'rgpdd'\n#\n#########################################################\n\n\nlibrary(rgpdd)\nlibrary(dplyr)\nlibrary(raster)\nlibrary(rgdal)\nlibrary(ggplot2)\n\n#########################################################\n#\n# Read in temperature data from WorldClim \n# The number corresponds to the month: 1 is January, 2 is February, etc. \n# Temperature data is in degrees celcius * 10.\n#\n#########################################################\n\ntemp_1_data <- raster(\"./tmean_10m_bil/tmean1.bil\")\ntemp_2_data <- raster(\"./tmean_10m_bil/tmean2.bil\")\ntemp_3_data <- raster(\"./tmean_10m_bil/tmean3.bil\")\ntemp_4_data <- raster(\"./tmean_10m_bil/tmean4.bil\")\ntemp_5_data <- raster(\"./tmean_10m_bil/tmean5.bil\")\ntemp_6_data <- raster(\"./tmean_10m_bil/tmean6.bil\")\ntemp_7_data <- raster(\"./tmean_10m_bil/tmean7.bil\")\ntemp_8_data <- raster(\"./tmean_10m_bil/tmean8.bil\")\ntemp_9_data <- raster(\"./tmean_10m_bil/tmean9.bil\")\ntemp_10_data <- raster(\"./tmean_10m_bil/tmean10.bil\")\ntemp_11_data <- raster(\"./tmean_10m_bil/tmean11.bil\")\ntemp_12_data <- raster(\"./tmean_10m_bil/tmean12.bil\")\n\n#I want to work with the climate data in a data frame because population data from the GPDD is in a data frame.\n\ntemp_1_data_df <- rasterToPoints(temp_1_data) %>% data.frame()\ntemp_2_data_df <- rasterToPoints(temp_2_data) %>% data.frame()\ntemp_3_data_df <- rasterToPoints(temp_3_data) %>% data.frame()\ntemp_4_data_df <- rasterToPoints(temp_4_data) %>% data.frame()\ntemp_5_data_df <- rasterToPoints(temp_5_data) %>% data.frame()\ntemp_6_data_df <- rasterToPoints(temp_6_data) %>% data.frame()\ntemp_7_data_df <- rasterToPoints(temp_7_data) %>% data.frame()\ntemp_8_data_df <- rasterToPoints(temp_8_data) %>% data.frame()\ntemp_9_data_df <- rasterToPoints(temp_9_data) %>% data.frame()\ntemp_10_data_df <- rasterToPoints(temp_10_data) %>% data.frame()\ntemp_11_data_df <- rasterToPoints(temp_11_data) %>% data.frame()\ntemp_12_data_df <- rasterToPoints(temp_12_data) %>% data.frame()\n\ncolnames(temp_1_data_df)[1:2] <- c(\"Long\", \"Lat\") \ncolnames(temp_2_data_df)[1:2] <- c(\"Long\", \"Lat\") \ncolnames(temp_3_data_df)[1:2] <- c(\"Long\", \"Lat\") \ncolnames(temp_4_data_df)[1:2] <- c(\"Long\", \"Lat\") \ncolnames(temp_5_data_df)[1:2] <- c(\"Long\", \"Lat\") \ncolnames(temp_6_data_df)[1:2] <- c(\"Long\", \"Lat\") \ncolnames(temp_7_data_df)[1:2] <- c(\"Long\", \"Lat\") \ncolnames(temp_8_data_df)[1:2] <- c(\"Long\", \"Lat\") \ncolnames(temp_9_data_df)[1:2] <- c(\"Long\", \"Lat\") \ncolnames(temp_10_data_df)[1:2] <- c(\"Long\", \"Lat\") \ncolnames(temp_11_data_df)[1:2] <- c(\"Long\", \"Lat\") \ncolnames(temp_12_data_df)[1:2] <- c(\"Long\", \"Lat\") \nnrow(temp_12_data_df)\n\n#amalgamate data frames. Because I don't know of a better way, I iteratively add df's to the main df \"monthly_temp_df\"\n#I join by longitude, then filter out the duplicate values\nmonthly_temp_df <- left_join(temp_1_data_df, temp_2_data_df, by = \"Long\") %>% filter(Lat.x == Lat.y)\nmonthly_temp_df <- monthly_temp_df %>% dplyr::select(Long, Lat.x, tmean1, tmean2)\nmonthly_temp_df <- left_join(monthly_temp_df, temp_3_data_df, by = \"Long\")\nmonthly_temp_df <- monthly_temp_df %>% filter(Lat.x == Lat) %>% dplyr::select(Long, Lat, tmean1, tmean2, tmean3)\nmonthly_temp_df <- left_join(monthly_temp_df, temp_4_data_df, by = \"Long\")  \nmonthly_temp_df <- monthly_temp_df %>% filter(Lat.x == Lat.y) %>% dplyr::select(Long, Lat.x, tmean1, tmean2, tmean3, tmean4)\nmonthly_temp_df <- left_join(monthly_temp_df, temp_5_data_df, by = \"Long\")\nmonthly_temp_df <- monthly_temp_df %>% filter(Lat.x == Lat) %>% dplyr::select(Long, Lat, tmean1, tmean2, tmean3, tmean4, tmean5)\nmonthly_temp_df <- left_join(monthly_temp_df, temp_6_data_df, by = \"Long\")\nmonthly_temp_df <- monthly_temp_df %>% filter(Lat.x == Lat.y) %>% dplyr::select(Long, Lat.x, tmean1, tmean2, tmean3, tmean4, tmean5, tmean6)\nmonthly_temp_df <- left_join(monthly_temp_df, temp_7_data_df, by = \"Long\")\nmonthly_temp_df <- monthly_temp_df %>% filter(Lat.x == Lat) %>% dplyr::select(Long, Lat, tmean1, tmean2, tmean3, tmean4, tmean5, tmean6, tmean7)\nmonthly_temp_df <- left_join(monthly_temp_df, temp_8_data_df, by = \"Long\")\nmonthly_temp_df <- monthly_temp_df %>% filter(Lat.x == Lat.y) %>% dplyr::select(Long, Lat.x, tmean1, tmean2, tmean3, tmean4, tmean5, tmean6, tmean7, tmean8)\nmonthly_temp_df <- left_join(monthly_temp_df, temp_9_data_df, by = \"Long\")\nmonthly_temp_df <- monthly_temp_df %>% filter(Lat.x == Lat) %>% dplyr::select(Long, Lat, tmean1, tmean2, tmean3, tmean4, tmean5, tmean6, tmean7, tmean8, tmean9)\nmonthly_temp_df <- left_join(monthly_temp_df, temp_10_data_df, by = \"Long\")\nmonthly_temp_df <- monthly_temp_df %>% filter(Lat.x == Lat.y) %>% dplyr::select(Long, Lat.y, tmean1, tmean2, tmean3, tmean4, tmean5, tmean6, tmean7, tmean8, tmean9, tmean10)\nmonthly_temp_df <- left_join(monthly_temp_df, temp_11_data_df, by = \"Long\")\nmonthly_temp_df <- monthly_temp_df %>% filter(Lat.y == Lat) %>% dplyr::select(Long, Lat, tmean1, tmean2, tmean3, tmean4, tmean5, tmean6, tmean7, tmean8, tmean9, tmean10, tmean11)\nmonthly_temp_df <- left_join(monthly_temp_df, temp_12_data_df, by = \"Long\")\nmonthly_temp_df <- monthly_temp_df %>% filter(Lat.y == Lat.x) %>% dplyr::select(Long, Lat.x, tmean1, tmean2, tmean3, tmean4, tmean5, tmean6, tmean7, tmean8, tmean9, tmean10, tmean11, tmean12)\n\nwrite.csv(file = \"WorldClim_avg_monthly_temp.csv\",monthly_temp_df)\nhead(monthly_temp_df)\n\n#Check - should see temperature gradient along lat\nmonthly_temp_df %>% ggplot() + geom_point(aes(x = Lat.x, y = tmean1 / 10), alpha = 0.01)\n\n#########################################################\n#\n# Next, I need to create the data frame of population locations from the Global Population Dynamics Database\n# The object 'gpdd_location' contains location metadata for each population time series in the GPDD \n#\n#########################################################\n\n#Create a dataframe with latitude, longitude, and location ID from the GPDD. This will be linked with the worldclim data.\nlocations_gpdd <- gpdd_location %>% dplyr::select(LongDD, LatDD, LocationID)\nhead(locations_gpdd)  \n\n\n#This empty data frame will be filled with temperature data for each location in the GPDD, with are indexed with the Location ID number.\ngpdd_location_temp <- data.frame(LocationID = numeric(max(locations_gpdd$LocationID)), Long = numeric(max(locations_gpdd$LocationID)), Lat = numeric(max(locations_gpdd$LocationID)),\n                                 Jan_temp = numeric(max(locations_gpdd$LocationID)), Feb_temp = numeric(max(locations_gpdd$LocationID)), March_temp = numeric(max(locations_gpdd$LocationID)), \n                                 April_temp = numeric(max(locations_gpdd$LocationID)), May_temp = numeric(max(locations_gpdd$LocationID)), June_temp = numeric(max(locations_gpdd$LocationID)),\n                                 July_temp = numeric(max(locations_gpdd$LocationID)), Aug_temp = numeric(max(locations_gpdd$LocationID)), Sept_temp = numeric(max(locations_gpdd$LocationID)),\n                                 Oct_temp = numeric(max(locations_gpdd$LocationID)), Nov_temp = numeric(max(locations_gpdd$LocationID)), Dec_temp = numeric(max(locations_gpdd$LocationID)))\n\n\nfor(i in 1:max(locations_gpdd$LocationID)){\n\n  location <- subset(locations_gpdd, LocationID == i)\n  \n  if(nrow(location) != 0){\n  \n    world_clim_location <- subset(monthly_temp_df, Long > location$LongDD - 0.1 & Long < location$LongDD + 0.1 & Lat.x > location$LatDD - 0.1 & Lat.x < location$LatDD + 0.1)\n    \n    gpdd_location_temp$LocationID[i] <- location$LocationID\n    gpdd_location_temp$Long[i] <- location$LongDD\n    gpdd_location_temp$Lat[i] <- location$LatDD\n    \n    if(nrow(world_clim_location) > 0){\n     \n      gpdd_location_temp$Jan_temp[i] <- world_clim_location %>% summarise(mean(tmean1) / 10)\n      gpdd_location_temp$Feb_temp[i] <- world_clim_location %>% summarise(mean(tmean2) / 10)\n      gpdd_location_temp$March_temp[i] <- world_clim_location %>% summarise(mean(tmean3) / 10) \n      gpdd_location_temp$April_temp[i] <- world_clim_location %>% summarise(mean(tmean4) / 10) \n      gpdd_location_temp$May_temp[i] <- world_clim_location %>% summarise(mean(tmean5) / 10) \n      gpdd_location_temp$June_temp[i] <- world_clim_location %>% summarise(mean(tmean6) / 10) \n      gpdd_location_temp$July_temp[i] <- world_clim_location %>% summarise(mean(tmean7) / 10) \n      gpdd_location_temp$Aug_temp[i] <- world_clim_location %>% summarise(mean(tmean8) / 10)\n      gpdd_location_temp$Sept_temp[i] <- world_clim_location %>% summarise(mean(tmean9) / 10) \n      gpdd_location_temp$Oct_temp[i] <- world_clim_location %>% summarise(mean(tmean10) / 10) \n      gpdd_location_temp$Nov_temp[i] <- world_clim_location %>% summarise(mean(tmean11) / 10) \n      gpdd_location_temp$Dec_temp[i] <- world_clim_location %>% summarise(mean(tmean12) / 10)\n      \n    } else{\n      gpdd_location_temp[i,4:length(gpdd_location_temp)] <- NA\n    }\n    \n  } else{\n    gpdd_location_temp[i,1:length(gpdd_location_temp)] <- NA\n  }\n    \n}\n\n",
    "created" : 1480203707831.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1674583645",
    "id" : "5DFBBFF7",
    "lastKnownWriteTime" : 1480276099,
    "last_content_update" : 1480276099179,
    "path" : "~/Documents/GPDD_temperature_trait_additions/Assemble_data.R",
    "project_path" : "Assemble_data.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}